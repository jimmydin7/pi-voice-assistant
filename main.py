import json
from core.speech_to_text import listen
from core.text_to_speech import speak
from core.commands_parser import parse_command
import sys
import random
from logs import logger

CONFIG_PATH = "data/config.json"
WELCOME_MSG_PATH = "data/welcome.txt"


try:
    with open(CONFIG_PATH, 'r') as f:
        config = json.load(f)

    logger.log('loaded config file', 'info')
except Exception:
    logger.log('could not load config file. check data/config.json', 'error')
    config = {
        'name': 'Assistant',
        'your_name': 'User',
        'exit_words': ['exit', 'quit', 'goodbye'],
        'voice_engine_rate': 200,
        'voice_engine_volume': 1.0,
    }


ASSISTANT_NAME = config.get('name')
USER_NAME = config.get('your_name')
EXIT_WORDS = config.get('exit_words')
ENGINE_RATE = config.get('voice_engine_rate')
ENGINE_VOLUME = config.get('voice_engine_volume')


def load_welcome_message():
    try:
        with open(WELCOME_MSG_PATH, 'r') as f:
            welcome_messages = f.read().splitlines()
            welcome_messages = [msg.replace('_USER_', USER_NAME) for msg in welcome_messages]
            chosen = random.choice(welcome_messages)
            logger.log('loaded welcome messages', 'info')
            return chosen
    except Exception:
        logger.log('could not load welcome messages. check data/welcome.txt', 'error')
        return f"Hello {USER_NAME}!"

def main():
    logger.log(f'starting {ASSISTANT_NAME}', 'info')
    welcome_text = load_welcome_message()
    speak(welcome_text, rate=ENGINE_RATE, volume=ENGINE_VOLUME)

    while True:
        try:
            logger.log('listening for speech...', 'info')
            command = listen().lower()
            if command:
                logger.log(f'user said: "{command}"', 'speech')
            else:
                logger.log('no speech detected', 'warning')

            if not command:
                continue

            for keyword in EXIT_WORDS:
                if keyword in command:
                    logger.log('exit word detected. shutting down', 'info')
                    speak(f"Goodbye {USER_NAME}!", rate=ENGINE_RATE, volume=ENGINE_VOLUME)
                    sys.exit(0)

            response = parse_command(command, load_welcome_message())
            if response:
                speak(response, rate=ENGINE_RATE, volume=ENGINE_VOLUME)
            else:
                logger.log('no response generated by command parser', 'warning')

        except KeyboardInterrupt:
            logger.log('keyboard interrupt received. exiting', 'warning')
            speak(f"Stopping {ASSISTANT_NAME}!", rate=ENGINE_RATE, volume=ENGINE_VOLUME)
            sys.exit(0)


if __name__ == "__main__":
    main()
